name: Build
# Reference https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10


permissions: write-all # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions


jobs:
  createrelease:
    name: Create Release
    runs-on: [ ubuntu-latest ]
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
          draft: false
          prerelease: false
      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v4
        with:
          name: release_url
          path: release_url.txt

  build:
    name: Build packages
    needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: macos-latest
            TARGET: macos
            CMD_BUILD: >
              pyinstaller -F -w -n translator_deepl -i app.ico translator_deepl.py &&
              cd dist/ &&
              zip -r9 translator_deepl translator_deepl.app/
            OUT_FILE_NAME: translator_deepl.zip
            ASSET_MIME: application/zip
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: pyinstaller -F -w -n translator_deepl -i app.ico translator_deepl.py
            OUT_FILE_NAME: translator_deepl.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable
        python-version: [ "3.11" ]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      # You can test your matrix by printing the current Python version
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools
          # pip install pyobjc-core
          pip install -r requirements.txt
      - name: Build with pyinstaller for ${{matrix.TARGET}}
        run: ${{matrix.CMD_BUILD}}
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v4
        with:
          name: release_url
          path: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        shell: bash
        run: |
          value=`cat release_url/release_url.txt`
          # upload_url=$(curl -sL https://api.github.com/repos/actions/checkout/releases/latest | jq -r '.upload_url')
          # echo "UPLOAD_URL_TEMP_TEST=$value" >> $GITHUB_ENV
          echo "upload_url=$value" >> $GITHUB_OUTPUT
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # upload_url: ${{ env.UPLOAD_URL }} # https://github.com/nguyentthai96/SRTranslator/settings/actions https://stackoverflow.com/questions/75995802/resource-not-accessible-by-integration-github-action-fails-for-pushed-commit
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
          asset_name: ${{ matrix.OUT_FILE_NAME}}
          asset_content_type: ${{ matrix.ASSET_MIME}}


  pypi_release:
    name: PyPi Release
    runs-on: [ ubuntu-latest ]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install twine
          pip install wheel
      - name: PyPi - Build binary wheel and source tarball
        run: |
          # python -m build --sdist --wheel --outdir dist/
          # python setup.py sdist bdist_wheel
          # python -m twine upload dist/*
      - name: PyPi - Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          skip-existing: true
          verify-metadata: true
          verbose: true


# https://forum.nim-lang.org/t/6371